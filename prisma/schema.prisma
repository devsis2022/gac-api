// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  username String @unique
  password String

  @@map("auth")
}

model User {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(100)
  username         String             @unique @db.VarChar(30)
  email            String             @unique @db.VarChar(100)
  password         String             @db.VarChar(255)
  cpf              String             @db.Char(12)
  userRole         UserRole[]
  userRegistration UserRegistration[]
  institution      Institution[]
  studentActivity  StudentActivity[]
  course           Course[]
  recovery         Recovery?
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  @@map("users")
}

model Recovery {
  userId       Int      @unique @map("user_id")
  recoveryCode Int      @map("recovery_code")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map("recoveries")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(50)
  userRole  UserRole[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("roles")
}

model UserRole {
  id            Int          @id @default(autoincrement())
  roleId        Int          @map("role_id")
  userId        Int          @map("user_id")
  institutionId Int?         @map("institution_id")
  institution   Institution? @relation(fields: [institutionId], references: [id])
  role          Role         @relation(fields: [roleId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@map("user_roles")
}

model UserRegistration {
  id        Int        @id @default(autoincrement())
  userId    Int        @map("user_id")
  user      User       @relation(fields: [userId], references: [id])
  classUser ClassUser?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("user_registrations")
}

enum InstitutionStatus {
  active
  pending
  repproved
}

model Institution {
  id          Int               @id @default(autoincrement())
  name        String            @unique @db.VarChar(255)
  nickname    String?           @unique @db.VarChar(100)
  description String?
  status      InstitutionStatus @default(pending)
  managerId   Int               @map("manager_id")
  manager     User              @relation(fields: [managerId], references: [id])
  course      Course[]
  UserRole    UserRole[]
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")

  @@map("institutions")
}

model Course {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String?
  institutionId Int         @map("institution_id")
  coordinatorId Int?        @map("coordinator_id")
  coordinator   User?       @relation(fields: [coordinatorId], references: [id])
  institution   Institution @relation(fields: [institutionId], references: [id])
  class         Class[]
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  @@unique([name, institutionId])
  @@map("courses")
}

enum AnnouncementStatus {
  ACTIVE  @map("active")
  DISABLE @map("disable")
}

model Announcement {
  id        Int                @id @default(autoincrement())
  name      String             @db.VarChar(255)
  status    AnnouncementStatus
  class     Class[]
  activity  Activity[]
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")

  @@map("announcements")
}

model Class {
  id             Int          @id @default(autoincrement())
  code           String       @db.VarChar(255)
  courseId       Int          @map("course_id")
  announcementId Int          @map("announcement_id")
  announcement   Announcement @relation(fields: [announcementId], references: [id])
  course         Course       @relation(fields: [courseId], references: [id])
  classUser      ClassUser[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("classes")
}

enum ClassUserStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  DENIED   @map("denied")
}

model ClassUser {
  id             Int              @id @default(autoincrement())
  status         ClassUserStatus
  classId        Int              @map("class_id")
  registrationId Int              @unique @map("registration_id")
  class          Class            @relation(fields: [classId], references: [id])
  registration   UserRegistration @relation(fields: [registrationId], references: [id])
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  @@map("class_users")
}

model Activity {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  maxMinutes      Int               @map("max_minutes")
  announcementId  Int               @map("announcement_id")
  announcement    Announcement      @relation(fields: [announcementId], references: [id])
  studentActivity StudentActivity[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  @@map("activities")
}

enum StudentActivityStatus {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REPROVED @map("reproved")
}

model StudentActivity {
  id          Int                   @id @default(autoincrement())
  name        String                @db.VarChar(255)
  description String?
  minutes     Int
  receipt     String                @db.VarChar(255)
  status      StudentActivityStatus
  studentId   Int                   @map("student_id")
  activityId  Int                   @map("activity_id")
  activity    Activity              @relation(fields: [activityId], references: [id])
  student     User                  @relation(fields: [studentId], references: [id])
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")

  @@map("student_activities")
}
